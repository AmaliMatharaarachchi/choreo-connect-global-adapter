resources:
  repositories:
    - repository: choreo-product-apim
      type: github
      name: wso2-enterprise/choreo-product-apim
      endpoint: choreo-cicd
      ref: refs/heads/main

    - repository: product-microgateway
      type: github
      name: wso2/product-microgateway
      endpoint: choreo-cicd
      ref: refs/heads/choreo

    - repository: common-templates
      type: github
      name: wso2-enterprise/choreo-common-pipeline-templates
      endpoint: choreo-cicd

trigger:
  branches:
    include:
      - refs/tags/v*

pr: none

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: 'choreo-apim-ga-sb'

  - name: MAVEN_CACHE_FOLDER
    value: $(Pipeline.Workspace)/.m2/repository

  - name: MAVEN_OPTS
    value: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'

jobs:
  - job: ChoreoAPIMBuild
    steps:
      - checkout: choreo-product-apim
        path: choreo-product-apim
        displayName: 'Checkout choreo-product-apim'

      - task: Cache@2
        displayName: 'Cache Maven artifacts'
        inputs:
          key: 'maven | "$(Agent.OS)" | **/pom.xml'
          path: $(MAVEN_CACHE_FOLDER)

      - task: Cache@2
        displayName: 'Cache Choreo APIM Docker image'
        inputs:
          key: 'docker | "$(Agent.OS)" | apim'
          path: $(Pipeline.Workspace)/docker
          cacheHitVar: CACHE_RESTORED

      - task: Maven@3
        displayName: 'Build choreo-product-apim'
        inputs:
          mavenPomFile: 'pom.xml'
          goals: 'install'
          options: '-Dmaven.test.skip=true $(MAVEN_OPTS)'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.8'
          jdkArchitectureOption: 'x64'
          mavenVersionOption: 3.8.5

      - task: PublishPipelineArtifact@1
        displayName: 'Publish APIM artifacts'
        inputs:
          targetPath: '$(MAVEN_CACHE_FOLDER)/org/wso2/choreo/am'
          artifactName: 'APIMTestUtils'

      - script: |
          docker build . -t wso2/choreo-product-apim:4.0 --no-cache
          mkdir -p $(Pipeline.Workspace)/docker
          docker save -o $(Pipeline.Workspace)/docker/choreo-apim.tar wso2/choreo-product-apim
        displayName: 'Build Choreo APIM Docker image'
        condition: and(not(canceled()), or(failed(), ne(variables.CACHE_RESTORED, 'true')))
        
  - job: ChoreoConnectBuild
    steps:
      - task: GoTool@0
        displayName: 'Install Go'
        inputs:
          version: '1.18.1'

      - script: |
          sudo apt update
          sudo apt install golint
        displayName: 'Install Golint'
      - checkout: product-microgateway
        path: product-microgateway
        displayName: 'Checkout product-microgateway'

      - task: Cache@2
        displayName: 'Cache Maven artifacts'
        inputs:
          key: 'maven | "$(Agent.OS)" | **/pom.xml'
          path: $(MAVEN_CACHE_FOLDER)

      - task: Cache@2
        displayName: 'Cache Choreo Connect Docker images'
        inputs:
          key: 'docker | "$(Agent.OS)" | mgw'
          path: $(Pipeline.Workspace)/docker
          cacheHitVar: CACHE_RESTORED

      - task: Maven@3
        displayName: 'Build product-microgateway'
        inputs:
          mavenPomFile: 'pom.xml'
          goals: 'install -P Release'
          options: '-Dmaven.test.skip=true $(MAVEN_OPTS) -s .maven/settings.xml'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.11'
          jdkArchitectureOption: 'x64'
          mavenVersionOption: 3.8.5

      - script: |
          mkdir -p $(Pipeline.Workspace)/docker
          docker save -o $(Pipeline.Workspace)/docker/enforcer.tar wso2/choreo-connect-enforcer
          docker save -o $(Pipeline.Workspace)/docker/adapter.tar wso2/choreo-connect-adapter
          docker save -o $(Pipeline.Workspace)/docker/router.tar wso2/choreo-connect-router
        displayName: 'Save Choreo Connect Docker images'
        condition: and(not(canceled()), or(failed(), ne(variables.CACHE_RESTORED, 'true')))

  - job: ChoreoGlobalAdapterRelease

    variables:
      CONTAINER_REGISTRY: choreocontrolplane.azurecr.io
      GLOBAL_ADAPTER_REPOSITORY: choreoipaas/choreo-connect-global-adapter
      GLOBAL_ADAPTER_VERSION: ''
      CACHE_RESTORED_APIM: false
      CACHE_RESTORED_MGW: false

    steps:
      - task: GoTool@0
        displayName: 'Install Go'
        inputs:
          version: '1.18.1'

      - script: |
          sudo apt update
          sudo apt install golint
        displayName: 'Install Golint'

      - task: Cache@2
        displayName: 'Cache APIM Docker image'
        inputs:
          key: 'docker | "$(Agent.OS)" | apim'
          path: $(Pipeline.Workspace)/docker
          cacheHitVar: CACHE_RESTORED_APIM

      - task: Cache@2
        displayName: 'Cache MGW Docker image'
        inputs:
          key: 'docker | "$(Agent.OS)" | mgw'
          path: $(Pipeline.Workspace)/docker
          cacheHitVar: CACHE_RESTORED_MGW

      - task: Cache@2
        displayName: 'Cache Maven artifacts'
        inputs:
          key: 'maven | "$(Agent.OS)" | **/pom.xml'
          path: $(MAVEN_CACHE_FOLDER)

      - script: |
          docker load -i $(Pipeline.Workspace)/docker/choreo-apim.tar
        displayName: 'Restore APIM Docker image'
        condition: and(not(canceled()), eq(variables.CACHE_RESTORED_APIM, 'true'))

      - script: |
          docker load -i $(Pipeline.Workspace)/docker/enforcer.tar
          docker load -i $(Pipeline.Workspace)/docker/router.tar
          docker load -i $(Pipeline.Workspace)/docker/adapter.tar
        displayName: 'Restore MGW Docker images'
        condition: and(not(canceled()), eq(variables.CACHE_RESTORED_MGW, 'true'))

      - task: DownloadPipelineArtifact@2
        displayName: 'Download APIM dependencies'
        inputs:
          artifactName: 'APIMTestUtils'
          path: '$(MAVEN_CACHE_FOLDER)/org/wso2/choreo/am'

      - script: |
          echo "##vso[task.setvariable variable=GLOBAL_ADAPTER_VERSION]$(cat pom.xml |
          grep -m1 "<version" | cut -d ">" -f2 | cut -d "<" -f1)"
        displayName: 'Retrieve Global adapter component versions'

      - task: Maven@3
        displayName: 'Build Global Adapter'
        inputs:
          mavenPomFile: 'pom.xml'
          goals: 'clean install -P Release'
          options: '-s .maven/settings.xml $(MAVEN_OPTS)'
          mavenOptions: '-Xmx3072m'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.11'
          jdkArchitectureOption: 'x64'
          mavenVersionOption: 3.8.5

      - task: Docker@2
        displayName: Login to ACR
        inputs:
          command: login
          containerRegistry: 'wso2choreo-control-plane-acr'

      - script: |
          docker tag wso2/choreo-connect-global-adapter:$(GLOBAL_ADAPTER_VERSION) $(CONTAINER_REGISTRY)/$(GLOBAL_ADAPTER_REPOSITORY):$(Build.SourceBranchName)
        displayName: 'Tag docker images to ACR repositories'

      - template: templates/trivy-docker-scan.yml
        parameters:
          repository: $(GLOBAL_ADAPTER_REPOSITORY)
          tag: $(Build.SourceBranchName)
          registry: $(CONTAINER_REGISTRY)

      - task: Docker@2
        inputs:
          command: push
          containerRegistry: 'wso2choreo-control-plane-acr'
          repository: $(GLOBAL_ADAPTER_REPOSITORY)
          tags: $(Build.SourceBranchName)
          displayName: 'Push Global Adapter Docker image'
